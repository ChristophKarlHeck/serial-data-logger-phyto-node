# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SerialMail

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SerialMail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SerialMail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSerialMail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SerialMail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SerialMail
    def Ch0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from SerialMail.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SerialMail
    def Ch0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def Ch0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SerialMail
    def Ch1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 3
            from SerialMail.Value import Value
            obj = Value()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SerialMail
    def Ch1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SerialMail
    def Ch1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SerialMail
    def Node(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def SerialMailStart(builder):
    builder.StartObject(3)

def Start(builder):
    SerialMailStart(builder)

def SerialMailAddCh0(builder, ch0):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ch0), 0)

def AddCh0(builder, ch0):
    SerialMailAddCh0(builder, ch0)

def SerialMailStartCh0Vector(builder, numElems):
    return builder.StartVector(3, numElems, 1)

def StartCh0Vector(builder, numElems):
    return SerialMailStartCh0Vector(builder, numElems)

def SerialMailAddCh1(builder, ch1):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ch1), 0)

def AddCh1(builder, ch1):
    SerialMailAddCh1(builder, ch1)

def SerialMailStartCh1Vector(builder, numElems):
    return builder.StartVector(3, numElems, 1)

def StartCh1Vector(builder, numElems):
    return SerialMailStartCh1Vector(builder, numElems)

def SerialMailAddNode(builder, node):
    builder.PrependInt32Slot(2, node, 0)

def AddNode(builder, node):
    SerialMailAddNode(builder, node)

def SerialMailEnd(builder):
    return builder.EndObject()

def End(builder):
    return SerialMailEnd(builder)
